import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Création du contexte\nconst DataContext = createContext();\n\n// Hook personnalisé pour utiliser le contexte\nexport const useData = () => useContext(DataContext);\n\n// Fournisseur du contexte\nexport const DataProvider = ({ children }) => {\n  const [gameData, setGameData] = useState({\n    items: {},\n    recipes: {},\n    jobs: {}\n  });\n  const [loading, setLoading] = useState(true);\n  const [activeJobId, setActiveJobId] = useState('all');\n  const [activeCategory, setActiveCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedItemId, setSelectedItemId] = useState(null);\n\n  // Charger les données depuis localStorage au démarrage\n  useEffect(() => {\n    const loadData = () => {\n      try {\n        const savedData = localStorage.getItem('gameData');\n        if (savedData) {\n          setGameData(JSON.parse(savedData));\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Sauvegarder les données dans localStorage\n  const saveGameData = (data) => {\n    try {\n      // Fusionner avec les données existantes ou remplacer complètement\n      const newData = {\n        items: { ...data.items },\n        recipes: { ...data.recipes },\n        jobs: { ...data.jobs }\n      };\n      \n      localStorage.setItem('gameData', JSON.stringify(newData));\n      setGameData(newData);\n      \n      // Réinitialiser l'item sélectionné si nécessaire\n      if (selectedItemId && !newData.items[selectedItemId]) {\n        setSelectedItemId(null);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde des données:', error);\n      return false;\n    }\n  };\n\n  // Récupérer les catégories uniques à partir des données\n  const getCategories = () => {\n    const categories = new Set();\n    categories.add('all');\n\n    Object.values(gameData.items).forEach(item => {\n      if (item.type && typeof item.type === 'string') {\n        categories.add(item.type.toLowerCase());\n      }\n    });\n\n    return Array.from(categories);\n  };\n\n  // Récupérer les métiers utilisés dans les recettes\n  const getJobs = () => {\n    const jobs = [{ id: 'all', name: 'Tous' }];\n    const jobsUsed = new Set();\n\n    // Collecter tous les IDs de métiers utilisés dans les recettes\n    Object.values(gameData.recipes).forEach(recipe => {\n      if (recipe.jobId) {\n        jobsUsed.add(recipe.jobId);\n      }\n    });\n\n    // Ajouter les métiers avec leurs noms\n    jobsUsed.forEach(jobId => {\n      const job = gameData.jobs[jobId];\n      if (job) {\n        jobs.push({ id: jobId, name: job.name });\n      }\n    });\n\n    return jobs;\n  };\n\n  // Obtenir les items filtrés et triés\n  const getFilteredItems = () => {\n    // Filtrer par métier et catégorie\n    let filteredItems = Object.values(gameData.items);\n\n    // Ne garder que les objets qui ont une recette\n    filteredItems = filteredItems.filter(item => gameData.recipes[item.id]);\n\n    // Filtrer par métier\n    if (activeJobId !== 'all') {\n      filteredItems = filteredItems.filter(item => {\n        const recipe = gameData.recipes[item.id];\n        return recipe && recipe.jobId == activeJobId;\n      });\n    }\n\n    // Filtrer par catégorie\n    if (activeCategory !== 'all') {\n      filteredItems = filteredItems.filter(item => {\n        return item.type && item.type.toLowerCase() === activeCategory.toLowerCase();\n      });\n    }\n\n    // Filtrer par terme de recherche\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filteredItems = filteredItems.filter(item => {\n        return item.name && item.name.toLowerCase().includes(term);\n      });\n    }\n\n    // Trier par niveau puis par nom\n    filteredItems.sort((a, b) => {\n      if (a.level !== b.level) return a.level - b.level;\n      return a.name.localeCompare(b.name);\n    });\n\n    // Grouper par niveau\n    const groupedItems = {};\n    filteredItems.forEach(item => {\n      const level = item.level || 0;\n      if (!groupedItems[level]) {\n        groupedItems[level] = [];\n      }\n      groupedItems[level].push(item);\n    });\n\n    return groupedItems;\n  };\n\n  const value = {\n    gameData,\n    loading,\n    saveGameData,\n    activeJobId,\n    setActiveJobId,\n    activeCategory,\n    setActiveCategory,\n    searchTerm,\n    setSearchTerm,\n    selectedItemId,\n    setSelectedItemId,\n    getCategories,\n    getJobs,\n    getFilteredItems\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n